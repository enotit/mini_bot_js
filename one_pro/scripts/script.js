var sex = 0;
var charact = '\nü§°:'
var bot = '\nü§ñ: '
let mesers = []
var count_xz = 0;
var name;
function fir(){
    text = document.getElementById('valueID').value;    // –ó–∞–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å input
    document.getElementById('valueID').value = '';  // input = ''
    var Area = document.getElementById("messangers"); // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º Area
    if(text != ''){
        mesers.push(text) // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
        Area.value += charact + text; // –î–æ–±–∞–≤–ª—è–µ–º  —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Area
        Area.value += bot + answer(text)
    }
    else{
        var audio = new Audio();
 		audio.src = 'src/stop.mp3';
  		audio.autoplay = true;
        alert('–ù–µ –æ–±–º–∞–Ω–µ—à!');
    }
}

function what_name(names){
    let last = names.slice(-1).toLowerCase();
    if(last == '—Ä' || last == '–π' || last == '–Ω' || last == '–¥' || last == '—Å' || last == '–≤' || last == '—Å' || last == '–π' || names == '–î–æ–±—Ä—ã–Ω—è' || last == '—Ç'){
        charact = '\nüï∫: '
        sex = 1
    }else{
        charact = '\nüë©: '
        sex = 2
    }
    name = names;
    delete last;
    return
}

function answer(quest){
if(sex == 0){
    if(text.split(' ').length - 1 > 0){
        return '–í–≤–µ–¥–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –∂–µ –Ω–∏–∫...';
    }
    else{
        what_name(quest)
        return '–û–æ–æ–æ, –ø—Ä–∏–≤–µ—Ç, ' + quest + ', –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?'
    }
}
else{
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ 
    if('–ø—Ä–∏–≤' == text.slice(0,4).toLowerCase() || '–∑–¥–∞—Ä' == text.slice(0,4).toLowerCase() || '–∑–¥—Ä–∞' == text.slice(0,4).toLowerCase()){
        Area.value += bot + '–ü—Ä–∏–≤–µ—Ç - –ø—Ä–∏–≤–µ—Ç!';
    }
    // –ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç
    else if('admin' == text){
        Area.value += bot + '–î–µ—Ä–∂–∏—Ç–µ: [' + mesers + ']'
        }
    // –ù–µ—Ç—É –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    else{
        count_xz += 1;
        switch(count_xz){
        case 1:
            return '–Ø –ø–æ–∂–∞–ª—É–π –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é...';
        case 2:
            return name +', —è –Ω–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!)';
        case 3:
            count_xz = 0;
            return '–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –¥–µ–Ω—å:)';
        }
}}}